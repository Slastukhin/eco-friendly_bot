require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { pool } = require('./database/db');
const ProfileHandler = require('./handlers/profileHandler');
const UtilizationHandler = require('./handlers/utilizationHandler');
const UserUtilizationsHandler = require('./handlers/userUtilizationsHandler');
const AwardsHandler = require('./handlers/awardsHandler');
const StatisticsHandler = require('./handlers/statisticsHandler');
const ShopHandler = require('./handlers/shopHandler');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const profileHandler = new ProfileHandler(bot);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
async function checkDatabaseConnection() {
    let client;
    try {
        client = await pool.connect();
        console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await client.query(`
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                chat_id BIGINT NOT NULL UNIQUE,
                fio VARCHAR(255) NOT NULL,
                age INTEGER NOT NULL,
                location VARCHAR(255) NOT NULL,
                photo_id TEXT,
                points INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞–≥—Ä–∞–¥
        await client.query(`
            CREATE TABLE IF NOT EXISTS awards (
                id SERIAL PRIMARY KEY,
                chat_id BIGINT NOT NULL,
                name VARCHAR(255) NOT NULL,
                description TEXT,
                awarded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (chat_id) REFERENCES users(chat_id) ON DELETE CASCADE
            );
        `);

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≥–æ—Ä–æ–¥–æ–≤
        await client.query(`
            CREATE TABLE IF NOT EXISTS cities (
                id SERIAL PRIMARY KEY,
                name VARCHAR(100) NOT NULL
            );
        `);

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞
        await client.query(`
            CREATE TABLE IF NOT EXISTS collection_points (
                id SERIAL PRIMARY KEY,
                city_id INTEGER REFERENCES cities(id),
                address VARCHAR(255) NOT NULL,
                is_default BOOLEAN DEFAULT TRUE,
                user_id INTEGER REFERENCES users(id),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_visible_to_all BOOLEAN DEFAULT FALSE
            );
        `);

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ç–∏–ø–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤
        await client.query(`
            CREATE TABLE IF NOT EXISTS waste_types (
                id SERIAL PRIMARY KEY,
                name VARCHAR(50) NOT NULL,
                points_per_kg INTEGER NOT NULL DEFAULT 10
            );
        `);

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π
        await client.query(`
            CREATE TABLE IF NOT EXISTS utilizations (
                id SERIAL PRIMARY KEY,
                user_id INTEGER REFERENCES users(id),
                collection_point_id INTEGER REFERENCES collection_points(id),
                waste_type_id INTEGER REFERENCES waste_types(id),
                weight DECIMAL(10,2) NOT NULL,
                date_utilized DATE NOT NULL DEFAULT CURRENT_DATE,
                time_utilized TIME NOT NULL DEFAULT CURRENT_TIME,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
        `);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –≥–æ—Ä–æ–¥–æ–≤
        const citiesCount = await client.query('SELECT COUNT(*) FROM cities');
        if (citiesCount.rows[0].count === '0') {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –≥–æ—Ä–æ–¥–∞
            await client.query(`
                INSERT INTO cities (name) VALUES
                ('–ú–æ—Å–∫–≤–∞'),
                ('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'),
                ('–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'),
                ('–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'),
                ('–ö–∞–∑–∞–Ω—å'),
                ('–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥'),
                ('–ß–µ–ª—è–±–∏–Ω—Å–∫'),
                ('–°–∞–º–∞—Ä–∞'),
                ('–û–º—Å–∫'),
                ('–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É');
            `);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞
        const pointsCount = await client.query('SELECT COUNT(*) FROM collection_points WHERE is_default = TRUE');
        if (pointsCount.rows[0].count === '0') {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
            const cities = await client.query('SELECT id FROM cities');
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º 15 –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞
            for (const city of cities.rows) {
                await client.query(`
                    INSERT INTO collection_points (city_id, address, is_default, is_visible_to_all) VALUES
                    ($1, '—É–ª. –õ–µ–Ω–∏–Ω–∞, 15', TRUE, TRUE),
                    ($1, '–ø—Ä. –ú–∏—Ä–∞, 78', TRUE, TRUE),
                    ($1, '—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, 42', TRUE, TRUE),
                    ($1, '—É–ª. –ü—É—à–∫–∏–Ω–∞, 23', TRUE, TRUE),
                    ($1, '–ø—Ä. –ü–æ–±–µ–¥—ã, 91', TRUE, TRUE),
                    ($1, '—É–ª. –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤, 55', TRUE, TRUE),
                    ($1, '—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, 127', TRUE, TRUE),
                    ($1, '–ø—Ä. –ú–µ—Ç–∞–ª–ª—É—Ä–≥–æ–≤, 83', TRUE, TRUE),
                    ($1, '—É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, 64', TRUE, TRUE),
                    ($1, '—É–ª. –ó–∞–≤–æ–¥—Å–∫–∞—è, 31', TRUE, TRUE),
                    ($1, '—É–ª. –ü–µ—Ä–≤–æ–º–∞–π—Å–∫–∞—è, 12', TRUE, TRUE),
                    ($1, '–ø—Ä. –ö–æ–º—Å–æ–º–æ–ª—å—Å–∫–∏–π, 45', TRUE, TRUE),
                    ($1, '—É–ª. –†–µ–≤–æ–ª—é—Ü–∏–∏, 89', TRUE, TRUE),
                    ($1, '—É–ª. –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, 56', TRUE, TRUE),
                    ($1, '–ø—Ä. –≠–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, 73', TRUE, TRUE)
                `, [city.id]);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ —Ç–∏–ø–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤
        const typesCount = await client.query('SELECT COUNT(*) FROM waste_types');
        if (typesCount.rows[0].count === '0') {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∏–ø—ã –æ—Ç—Ö–æ–¥–æ–≤
            await client.query(`
                INSERT INTO waste_types (name, points_per_kg) VALUES
                ('–ë—É–º–∞–≥–∞', 10),
                ('–ö–∞—Ä—Ç–æ–Ω', 8),
                ('–ü–ª–∞—Å—Ç–∏–∫ (PET)', 15),
                ('–ü–ª–∞—Å—Ç–∏–∫ (HDPE)', 12),
                ('–°—Ç–µ–∫–ª–æ', 5),
                ('–ú–µ—Ç–∞–ª–ª (–∞–ª—é–º–∏–Ω–∏–π)', 20),
                ('–ú–µ—Ç–∞–ª–ª (–∂–µ—Å—Ç—å)', 15),
                ('–ë–∞—Ç–∞—Ä–µ–π–∫–∏', 30),
                ('–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', 25),
                ('–¢–µ–∫—Å—Ç–∏–ª—å', 10);
            `);
        }

        // –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤—É—é
        const oldTableExists = await client.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'newtable'
            );
        `);

        if (oldTableExists.rows[0].exists) {
            // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤—É—é
            await client.query(`
                INSERT INTO users (chat_id, fio, age, location, photo_id)
                SELECT chat_id, fio, age, location, photo_id
                FROM newtable
                ON CONFLICT (chat_id) DO NOTHING;
            `);

            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
            await client.query('DROP TABLE IF EXISTS newtable;');
        }

        console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
    } finally {
        if (client) {
            await client.release();
        }
    }
}

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
checkDatabaseConnection();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: 'profile', description: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' },
    { command: 'utilization', description: '–ó–∞–ø–∏—Å–∞—Ç—å —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é' },
    { command: 'shop', description: '–ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–∫–µ—Ä–æ–≤' }
]);

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π
const userStates = {};

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const welcomeMessage = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞! üå±

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
- –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à—É —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
- –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é –æ—Ç—Ö–æ–¥–æ–≤
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.`;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function deletePreviousMessage(chatId) {
    if (userStates[chatId] && userStates[chatId].lastMessageId) {
        try {
            await bot.deleteMessage(chatId, userStates[chatId].lastMessageId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
bot.onText(/\/profile/, async (msg) => {
    const chatId = msg.chat.id;
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        const result = await pool.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
        
        if (result.rows.length === 0) {
            await bot.sendMessage(chatId, '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' }]
                    ]
                }
            });
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }],
                    [{ text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' }],
                    [{ text: '–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã', callback_data: 'my_awards' }],
                    [{ text: '–ú–æ–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏', callback_data: 'my_utilizations' }],
                    [{ text: '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_statistics' }]
                ]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId);

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates[chatId] = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try {
        const result = await pool.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
        if (result.rows.length > 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üóë –£—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'utilization' },
                            { text: 'üìä –ú–æ–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏', callback_data: 'my_utilizations' }
                        ],
                        [
                            { text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' },
                            { text: 'üé® –ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–∫–µ—Ä–æ–≤', callback_data: 'shop' }
                        ],
                        [
                            { text: 'üìã –û —Å–µ—Ä–≤–∏—Å–µ', callback_data: 'about' }
                        ]
                    ]
                }
            });
            return;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    }

    const keyboard = {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' }]
            ]
        }
    };

    try {
        const sentMessage = await bot.sendMessage(chatId, welcomeMessage, keyboard);
        userStates[chatId].lastMessageId = sentMessage.message_id;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /utilization
bot.onText(/\/utilization/, async (msg) => {
    const chatId = msg.chat.id;
    await UtilizationHandler.handleUtilizationCommand(bot, chatId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        if (data.startsWith('city_')) {
            await UtilizationHandler.handleCitySelection(bot, query);
        } else if (data === 'back_to_cities') {
            await UtilizationHandler.handleBackToCities(bot, query);
        } else if (data.startsWith('point_')) {
            await UtilizationHandler.handlePointSelection(bot, query);
        } else if (data.startsWith('type_')) {
            await UtilizationHandler.handleTypeSelection(bot, query);
        } else if (data === 'view_all_utilizations') {
            await UserUtilizationsHandler.handleViewAllUtilizations(bot, query);
        } else if (data === 'my_utilizations') {
            await UserUtilizationsHandler.handleMyUtilizations(bot, chatId);
        } else if (data === 'utilization') {
            await UtilizationHandler.handleUtilizationCommand(bot, chatId);
        } else if (data === 'my_awards' || data === 'refresh_awards') {
            await AwardsHandler.handleMyAwards(bot, chatId);
        } else if (data === 'download_awards') {
            await AwardsHandler.handleDownloadAwards(bot, chatId);
        } else if (data === 'my_statistics') {
            await StatisticsHandler.handleStatisticsMenu(bot, chatId);
        } else if (data === 'stats_cities') {
            await StatisticsHandler.handleCitiesStats(bot, chatId);
        } else if (data === 'stats_points') {
            await StatisticsHandler.handlePointsStats(bot, chatId);
        } else if (data === 'stats_materials') {
            await StatisticsHandler.handleMaterialsStats(bot, chatId);
        } else if (data === 'about') {
            const aboutMessage = `üåç *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ECO Friendly Bot!*

üå± *–ù–∞—à–∞ –º–∏—Å—Å–∏—è:* 
–ü–æ–º–æ–≥–∞–µ–º –¥–µ–ª–∞—Ç—å –º–∏—Ä —á–∏—â–µ, –ø—Ä–µ–≤—Ä–∞—â–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –æ—Ç—Ö–æ–¥–æ–≤ –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å!

‚ôªÔ∏è *–ß—Ç–æ —É–º–µ–µ—Ç –Ω–∞—à –±–æ—Ç:*
‚Ä¢ –ó–∞–ø–∏—Å—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π
‚Ä¢ –£–¥–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞
‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ Excel
‚Ä¢ –ü—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

üìä *–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –æ—Ç—Ö–æ–¥–æ–≤:*
‚Ä¢ –ü–ª–∞—Å—Ç–∏–∫
‚Ä¢ –ë—É–º–∞–≥–∞
‚Ä¢ –°—Ç–µ–∫–ª–æ
‚Ä¢ –ú–µ—Ç–∞–ª–ª
‚Ä¢ –ë–∞—Ç–∞—Ä–µ–π–∫–∏

üèÜ *–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –º—ã:*
‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º –≤ 10 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏
‚Ä¢ –ë–æ–ª–µ–µ 150 –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞ –æ—Ç—Ö–æ–¥–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel

ü§ù *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º:*
–í–º–µ—Å—Ç–µ –º—ã –¥–µ–ª–∞–µ–º –Ω–∞—à—É –ø–ª–∞–Ω–µ—Ç—É —á–∏—â–µ! –ö–∞–∂–¥–∞—è –≤–∞—à–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è - —ç—Ç–æ –≤–∫–ª–∞–¥ –≤ –±—É–¥—É—â–µ–µ —ç–∫–æ–ª–æ–≥–∏–∏.

üéØ *–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:*
–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–£—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" –∏ –≤–Ω–µ—Å–∏—Ç–µ —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ –∑–∞—â–∏—Ç—É –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã!`;

            await bot.sendMessage(chatId, aboutMessage, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üóë –£—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'utilization' }]
                    ]
                }
            });
        } else if (data === 'shop') {
            await ShopHandler.handleShopMenu(bot, chatId);
        } else if (data.startsWith('preview_sticker_pack:')) {
            const packId = parseInt(data.split(':')[1]);
            await ShopHandler.handlePreviewPack(bot, chatId, packId);
        } else if (data.startsWith('buy_sticker_pack:')) {
            const packId = parseInt(data.split(':')[1]);
            await ShopHandler.handleBuyPack(bot, chatId, packId);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        else if (['my_profile', 'edit_profile', 'edit_fio', 'edit_age', 'edit_location', 'edit_photo', 'back_to_profile'].includes(data)) {
            await profileHandler.handleCallbackQuery(query);
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        else if (data === 'register') {
            await deletePreviousMessage(chatId);
            userStates[chatId] = { step: 'fio', isRegistering: true };
            const sentMessage = await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –§–ò–û (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã):');
            userStates[chatId].lastMessageId = sentMessage.message_id;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const photo = msg.photo;

    if (text && text.startsWith('/')) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥

    if (text === 'üìä –ú–æ–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏') {
        await UserUtilizationsHandler.handleMyUtilizations(bot, chatId);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –≤–µ—Å–∞ –¥–ª—è —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
    if (bot.utilizationState && bot.utilizationState[chatId] && bot.utilizationState[chatId].step === 'weight') {
        await UtilizationHandler.handleWeightInput(bot, msg);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
    if (profileHandler.userStates[chatId] && profileHandler.userStates[chatId].isEditing) {
        await profileHandler.handleEdit(msg);
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if (userStates[chatId] && userStates[chatId].isRegistering) {
        try {
            await bot.deleteMessage(chatId, msg.message_id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }

        switch (userStates[chatId].step) {
            case 'fio':
                if (!/^[–∞-—è–ê-–Ø—ë–Å\s]+$/.test(text)) {
                    await deletePreviousMessage(chatId);
                    const sentMessage = await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏:');
                    userStates[chatId].lastMessageId = sentMessage.message_id;
                    return;
                }
                userStates[chatId].fio = text;
                userStates[chatId].step = 'age';
                await deletePreviousMessage(chatId);
                const ageMessage = await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 100):');
                userStates[chatId].lastMessageId = ageMessage.message_id;
                break;

            case 'age':
                if (!/^\d+$/.test(text) || parseInt(text) < 1 || parseInt(text) > 100) {
                    await deletePreviousMessage(chatId);
                    const sentMessage = await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 100):');
                    userStates[chatId].lastMessageId = sentMessage.message_id;
                    return;
                }
                userStates[chatId].age = text;
                userStates[chatId].step = 'location';
                await deletePreviousMessage(chatId);
                const locationMessage = await bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:');
                userStates[chatId].lastMessageId = locationMessage.message_id;
                break;

            case 'location':
                userStates[chatId].location = text;
                userStates[chatId].step = 'photo';
                await deletePreviousMessage(chatId);
                const photoMessage = await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:');
                userStates[chatId].lastMessageId = photoMessage.message_id;
                break;

            case 'photo':
                if (!photo) {
                    await deletePreviousMessage(chatId);
                    const sentMessage = await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:');
                    userStates[chatId].lastMessageId = sentMessage.message_id;
                    return;
                }

                // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (—Å–∞–º—É—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é) –≤–µ—Ä—Å–∏—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
                const photoId = photo[photo.length - 1].file_id;
                
                try {
                    const result = await pool.query(
                        'INSERT INTO users (chat_id, fio, age, location, photo_id) VALUES ($1, $2, $3, $4, $5) RETURNING *',
                        [chatId, userStates[chatId].fio, userStates[chatId].age, userStates[chatId].location, photoId]
                    );
                    
                    console.log('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã:', result.rows[0]);

                    await deletePreviousMessage(chatId);
                    await bot.sendMessage(
                        chatId,
                        '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–ª–µ–≤–∞ (‚ò∞) –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞.'
                    );
                    delete userStates[chatId];
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
                    await deletePreviousMessage(chatId);
                    const errorMessage = await bot.sendMessage(
                        chatId,
                        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /start'
                    );
                    userStates[chatId].lastMessageId = errorMessage.message_id;
                }
                break;
        }
        return;
    }

    // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ "—Å–ª—É—á–∞–π–Ω–æ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try {
        const result = await pool.query('SELECT * FROM users WHERE chat_id = $1', [chatId]);
        const message = result.rows.length > 0 
            ? '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –æ—Ç –º–µ–Ω—è —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–µ–Ω—é –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–π –≤—ã–±–æ—Ä–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π!'
            : '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:';

        const keyboard = result.rows.length > 0 
            ? {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: 'üóë –£—Ç–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'utilization' },
                            { text: 'üìä –ú–æ–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏', callback_data: 'my_utilizations' }
                        ],
                        [
                            { text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' },
                            { text: 'üé® –ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–∫–µ—Ä–æ–≤', callback_data: 'shop' }
                        ],
                        [
                            { text: 'üìã –û —Å–µ—Ä–≤–∏—Å–µ', callback_data: 'about' }
                        ]
                    ]
                }
            }
            : {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' }]
                    ]
                }
            };

        await bot.sendMessage(chatId, message, keyboard);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /shop
bot.onText(/\/shop/, async (msg) => {
    const chatId = msg.chat.id;
    await ShopHandler.handleShopMenu(bot, chatId);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...'); 