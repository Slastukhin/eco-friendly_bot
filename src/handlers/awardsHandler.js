const User = require('../models/user');
const Award = require('../models/award');
const ExcelJS = require('exceljs');

class AwardsHandler {
    static async handleMyAwards(bot, chatId) {
        try {
            const awards = await Award.getUserAwards(chatId);
            
            if (awards.length === 0) {
                await bot.sendMessage(chatId, 
                    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥. –°–¥–∞–≤–∞–π—Ç–µ –æ—Ç—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã! üå±'
                );
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–∞–≥—Ä–∞–¥
            const recentAwards = awards.slice(0, 5);

            const message = `üèÜ –í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã (–≤—Å–µ–≥–æ ${awards.length}):\n\n` +
                recentAwards.map((award, index) => 
                    `${index + 1}. ${award.name}\n` +
                    `   ${award.description}\n` +
                    `   –ü–æ–ª—É—á–µ–Ω–∞: ${new Date(award.awarded_at).toLocaleDateString('ru-RU')}`
                ).join('\n\n');

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ 5
            const keyboard = {
                inline_keyboard: [
                    [{ text: 'üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã', callback_data: 'download_awards' }],
                    [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }]
                ]
            };

            await bot.sendMessage(chatId, message, { reply_markup: keyboard });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static async handleDownloadAwards(bot, chatId) {
        try {
            const awards = await Award.getUserAwards(chatId);

            if (awards.length === 0) {
                await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏.');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É Excel
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('–ù–∞–≥—Ä–∞–¥—ã');

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.columns = [
                { header: '‚Ññ', key: 'number', width: 5 },
                { header: '–ù–∞–≥—Ä–∞–¥–∞', key: 'name', width: 30 },
                { header: '–û–ø–∏—Å–∞–Ω–∏–µ', key: 'description', width: 40 },
                { header: '–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è', key: 'awarded_at', width: 20 }
            ];

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            awards.forEach((award, index) => {
                worksheet.addRow({
                    number: index + 1,
                    name: award.name,
                    description: award.description,
                    awarded_at: new Date(award.awarded_at).toLocaleDateString('ru-RU')
                });
            });

            // –°—Ç–∏–ª–∏–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.getRow(1).font = { bold: true };
            worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };

            // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä —Å —Ñ–∞–π–ª–æ–º
            const buffer = await workbook.xlsx.writeBuffer();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Ç–∏–ø–æ–º
            await bot.sendDocument(chatId, buffer, {
                filename: 'awards.xlsx',
                caption: 'üìä –í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã',
                contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            }, {
                // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª
                filename: 'awards.xlsx',
                contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel-—Ñ–∞–π–ª–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static async checkAndAwardUser(bot, chatId, points) {
        try {
            const user = await User.findByChatId(chatId);
            if (!user) return;

            const totalPoints = user.points;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–∞–ª–ª–æ–≤
            const awards = [
                { points: 100, name: 'üå± –≠–∫–æ-–Ω–æ–≤–∏—á–æ–∫', description: '–ù–∞–±—Ä–∞–Ω–æ 100 –±–∞–ª–ª–æ–≤' },
                { points: 500, name: 'üåø –≠–∫–æ-—ç–Ω—Ç—É–∑–∏–∞—Å—Ç', description: '–ù–∞–±—Ä–∞–Ω–æ 500 –±–∞–ª–ª–æ–≤' },
                { points: 1000, name: 'üå≥ –ó–∞—â–∏—Ç–Ω–∏–∫ –ø—Ä–∏—Ä–æ–¥—ã', description: '–ù–∞–±—Ä–∞–Ω–æ 1000 –±–∞–ª–ª–æ–≤' },
                { points: 5000, name: 'üåç –≠–∫–æ-–≥–µ—Ä–æ–π', description: '–ù–∞–±—Ä–∞–Ω–æ 5000 –±–∞–ª–ª–æ–≤' },
                { points: 10000, name: '‚≠ê –≠–∫–æ-–ª–µ–≥–µ–Ω–¥–∞', description: '–ù–∞–±—Ä–∞–Ω–æ 10000 –±–∞–ª–ª–æ–≤' }
            ];

            for (const award of awards) {
                if (totalPoints >= award.points) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const existingAward = await Award.findUserAward(chatId, award.name);
                    if (!existingAward) {
                        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É
                        await Award.create(chatId, award.name, award.description);
                        
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await bot.sendMessage(chatId, 
                            `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—É—é –Ω–∞–≥—Ä–∞–¥—É:\n\n${award.name}\n${award.description}`, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üèÜ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã', callback_data: 'my_awards' }]
                                ]
                            }
                        });
                    }
                }
            }
        } catch (error) {
            console.error('Error in checkAndAwardUser:', error);
        }
    }
}

module.exports = AwardsHandler; 