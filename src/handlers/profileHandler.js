const { getUserProfile, updateUserProfile } = require('../database/db');

class ProfileHandler {
    constructor(bot) {
        this.bot = bot;
        this.userStates = {};
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    formatProfile(profile) {
        return `üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n\n` +
               `üë§ *–§–ò–û:* ${profile.fio}\n` +
               `üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* ${profile.age} –ª–µ—Ç\n` +
               `üìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* ${profile.location}\n`;
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async showProfile(chatId) {
        try {
            const profile = await getUserProfile(chatId);
            if (!profile) {
                await this.bot.sendMessage(chatId, '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            await this.bot.sendPhoto(chatId, profile.photo_id, {
                caption: this.formatProfile(profile),
                parse_mode: 'Markdown'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
            await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    async showEditMenu(chatId) {
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û', callback_data: 'edit_fio' }],
                    [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', callback_data: 'edit_age' }],
                    [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', callback_data: 'edit_location' }],
                    [{ text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: 'edit_photo' }],
                    [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_profile' }]
                ]
            }
        };

        await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', keyboard);
    }

    // –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è
    async startFieldEdit(chatId, field) {
        const messages = {
            fio: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û (—Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã):',
            age: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 100):',
            location: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:',
            photo: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:'
        };

        this.userStates[chatId] = { 
            isEditing: true, 
            field: field 
        };

        await this.bot.sendMessage(chatId, messages[field]);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
    async handleEdit(msg) {
        const chatId = msg.chat.id;
        const state = this.userStates[chatId];

        if (!state || !state.isEditing) return;

        try {
            let value;
            let isValid = true;
            const text = msg.text;
            const photo = msg.photo;

            switch (state.field) {
                case 'fio':
                    if (!/^[–∞-—è–ê-–Ø—ë–Å\s]+$/.test(text)) {
                        await this.bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–º–∏ –±—É–∫–≤–∞–º–∏:');
                        isValid = false;
                    }
                    value = text;
                    break;

                case 'age':
                    if (!/^\d+$/.test(text) || parseInt(text) < 1 || parseInt(text) > 100) {
                        await this.bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 100):');
                        isValid = false;
                    }
                    value = parseInt(text);
                    break;

                case 'location':
                    value = text;
                    break;

                case 'photo':
                    if (!photo) {
                        await this.bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:');
                        isValid = false;
                        break;
                    }
                    value = photo[photo.length - 1].file_id;
                    break;
            }

            if (!isValid) return;

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
            await updateUserProfile(chatId, state.field, value);
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            delete this.userStates[chatId];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await this.bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            await this.showProfile(chatId);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback query –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    async handleCallbackQuery(query) {
        const chatId = query.message.chat.id;
        const action = query.data;

        switch (action) {
            case 'my_profile':
                await this.showProfile(chatId);
                break;

            case 'edit_profile':
                await this.showEditMenu(chatId);
                break;

            case 'edit_fio':
                await this.startFieldEdit(chatId, 'fio');
                break;

            case 'edit_age':
                await this.startFieldEdit(chatId, 'age');
                break;

            case 'edit_location':
                await this.startFieldEdit(chatId, 'location');
                break;

            case 'edit_photo':
                await this.startFieldEdit(chatId, 'photo');
                break;

            case 'back_to_profile':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
                await this.bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'my_profile' }],
                            [{ text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'edit_profile' }],
                            [{ text: '–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã', callback_data: 'my_awards' }],
                            [{ text: '–ú–æ–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏', callback_data: 'my_utilizations' }],
                            [{ text: '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_statistics' }],
                            [{ text: 'üé® –ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–∫–µ—Ä–æ–≤', callback_data: 'shop' }]
                        ]
                    }
                });
                break;
        }
    }
}

module.exports = ProfileHandler; 