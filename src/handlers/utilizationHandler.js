const { pool } = require('../database/db');

class UtilizationHandler {
    static async handleUtilizationCommand(bot, chatId) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const userResult = await pool.query('SELECT id FROM users WHERE chat_id = $1', [chatId]);
            if (userResult.rows.length === 0) {
                await bot.sendMessage(chatId, '–î–ª—è –∑–∞–ø–∏—Å–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' }]
                        ]
                    }
                });
                return;
            }

            const welcomeMessage = `–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ–± —ç–∫–æ–ª–æ–≥–∏–∏! üå±

–í–∞—à –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—à—É –ø–ª–∞–Ω–µ—Ç—É —á–∏—Å—Ç–æ–π –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π. 

–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–∏—à–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–π —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:`;

            await bot.sendMessage(chatId, welcomeMessage);
            await this.showCitiesList(bot, chatId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static async showCitiesList(bot, chatId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
            const cities = await pool.query('SELECT * FROM cities ORDER BY name');
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏ (3 –∫–æ–ª–æ–Ω–∫–∏)
            const keyboard = [];
            const citiesData = cities.rows;
            
            for (let i = 0; i < citiesData.length; i += 3) {
                const row = [];
                for (let j = 0; j < 3 && i + j < citiesData.length; j++) {
                    row.push({
                        text: citiesData[i + j].name,
                        callback_data: `city_${citiesData[i + j].id}`
                    });
                }
                keyboard.push(row);
            }

            await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static async handleCitySelection(bot, query) {
        const chatId = query.message.chat.id;
        const cityId = query.data.split('_')[1];

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            const points = await pool.query(
                `SELECT * FROM collection_points WHERE city_id = $1 ORDER BY address`,
                [cityId]
            );
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥—Ä–µ—Å–∞–º–∏ (2 –∫–æ–ª–æ–Ω–∫–∏)
            const keyboard = [];
            const pointsData = points.rows;
            
            for (let i = 0; i < pointsData.length; i += 2) {
                const row = [];
                for (let j = 0; j < 2 && i + j < pointsData.length; j++) {
                    row.push({
                        text: pointsData[i + j].address,
                        callback_data: `point_${pointsData[i + j].id}`
                    });
                }
                keyboard.push(row);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º', callback_data: 'back_to_cities' }]);

            await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –ø—Ä–∏–µ–º–∞:', {
                chat_id: chatId,
                message_id: query.message.message_id,
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ—Ä–æ–¥–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static async handleBackToCities(bot, query) {
        const chatId = query.message.chat.id;
        await this.showCitiesList(bot, chatId);
    }

    static async handlePointSelection(bot, query) {
        const chatId = query.message.chat.id;
        const pointId = query.data.split('_')[1];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if (!bot.utilizationState) bot.utilizationState = {};
        bot.utilizationState[chatId] = {
            pointId: pointId,
            step: 'type'
        };

        const keyboard = {
            inline_keyboard: [
                [
                    { text: '–ü–ª–∞—Å—Ç–∏–∫', callback_data: 'type_plastic' },
                    { text: '–ë—É–º–∞–≥–∞', callback_data: 'type_paper' }
                ],
                [
                    { text: '–°—Ç–µ–∫–ª–æ', callback_data: 'type_glass' },
                    { text: '–ú–µ—Ç–∞–ª–ª', callback_data: 'type_metal' }
                ],
                [
                    { text: '–ë–∞—Ç–∞—Ä–µ–π–∫–∏', callback_data: 'type_batteries' }
                ],
                [{ text: '¬´ –ù–∞–∑–∞–¥ –∫ –ø—É–Ω–∫—Ç–∞–º', callback_data: 'back_to_points' }]
            ]
        };

        await bot.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—Ö–æ–¥–æ–≤:', {
            chat_id: chatId,
            message_id: query.message.message_id,
            reply_markup: keyboard
        });
    }

    static async handleTypeSelection(bot, query) {
        const chatId = query.message.chat.id;
        const type = query.data.split('_')[1];
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if (!bot.utilizationState[chatId]) bot.utilizationState[chatId] = {};
            bot.utilizationState[chatId].type = type;
            bot.utilizationState[chatId].step = 'weight';

            await bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –æ—Ç—Ö–æ–¥–æ–≤ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5):', {
                chat_id: chatId,
                message_id: query.message.message_id
            });
        } catch (error) {
            console.error('Error selecting waste type:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ—Ç—Ö–æ–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static async handleWeightInput(bot, msg) {
        const chatId = msg.chat.id;
        const weight = parseFloat(msg.text);

        if (isNaN(weight) || weight <= 0) {
            await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5)');
            return;
        }

        try {
            const state = bot.utilizationState[chatId];
            if (!state || !state.pointId || !state.type) {
                throw new Error('Missing utilization state data');
            }

            const userId = await this.getUserId(chatId);

            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            const typeMapping = {
                'plastic': '–ü–ª–∞—Å—Ç–∏–∫ (PET)',
                'paper': '–ë—É–º–∞–≥–∞',
                'glass': '–°—Ç–µ–∫–ª–æ',
                'metal': '–ú–µ—Ç–∞–ª–ª (–∞–ª—é–º–∏–Ω–∏–π)',
                'batteries': '–ë–∞—Ç–∞—Ä–µ–π–∫–∏'
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('Looking for waste type:', typeMapping[state.type]);
            
            const wasteTypeResult = await pool.query(
                'SELECT id FROM waste_types WHERE name = $1',
                [typeMapping[state.type]]
            );

            console.log('Waste type query result:', wasteTypeResult.rows);

            if (wasteTypeResult.rows.length === 0) {
                throw new Error(`Waste type not found: ${typeMapping[state.type]}`);
            }

            const wasteTypeId = wasteTypeResult.rows[0].id;

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const result = await pool.query(
                `INSERT INTO utilizations 
                (user_id, collection_point_id, waste_type_id, weight, date_utilized, time_utilized) 
                VALUES ($1, $2, $3, $4, CURRENT_DATE, CURRENT_TIME)
                RETURNING *`,
                [userId, state.pointId, wasteTypeId, weight]
            );

            console.log('Utilization created:', result.rows[0]);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await bot.sendMessage(chatId, 
                `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞:\n` +
                `–¢–∏–ø –æ—Ç—Ö–æ–¥–æ–≤: ${typeMapping[state.type]}\n` +
                `–í–µ—Å: ${weight} –∫–≥\n\n` +
                `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∫–ª–∞–¥ –≤ –∑–∞—â–∏—Ç—É —ç–∫–æ–ª–æ–≥–∏–∏! üåç`
            );

            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            delete bot.utilizationState[chatId];

        } catch (error) {
            console.error('Error recording utilization:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static getWasteTypeName(type) {
        const types = {
            'plastic': '–ü–ª–∞—Å—Ç–∏–∫',
            'paper': '–ë—É–º–∞–≥–∞',
            'glass': '–°—Ç–µ–∫–ª–æ',
            'metal': '–ú–µ—Ç–∞–ª–ª',
            'batteries': '–ë–∞—Ç–∞—Ä–µ–π–∫–∏'
        };
        return types[type] || type;
    }

    static async getUserId(chatId) {
        const result = await pool.query('SELECT id FROM users WHERE chat_id = $1', [chatId]);
        if (result.rows.length === 0) {
            throw new Error('User not found');
        }
        return result.rows[0].id;
    }
}

module.exports = UtilizationHandler; 