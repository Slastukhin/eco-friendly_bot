const { ChartJSNodeCanvas } = require('chartjs-node-canvas');
const { pool } = require('../database/db');

class StatisticsHandler {
    static async handleStatisticsMenu(bot, chatId) {
        const keyboard = {
            inline_keyboard: [
                [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º', callback_data: 'stats_cities' }],
                [{ text: 'üìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–Ω–∫—Ç–∞–º –ø—Ä–∏—ë–º–∞', callback_data: 'stats_points' }],
                [{ text: 'üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º', callback_data: 'stats_materials' }],
                [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }]
            ]
        };

        await bot.sendMessage(chatId, 
            'üìà –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:',
            { reply_markup: keyboard }
        );
    }

    static async handleCitiesStats(bot, chatId) {
        let statusMessage;
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            statusMessage = await bot.sendMessage(chatId, 'üîÑ –§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º...');

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º
            const result = await pool.query(`
                SELECT c.name as city, COUNT(*) as count
                FROM utilizations u
                JOIN users usr ON u.user_id = usr.id
                JOIN collection_points cp ON u.collection_point_id = cp.id
                JOIN cities c ON cp.city_id = c.id
                WHERE usr.chat_id = $1
                GROUP BY c.name
                ORDER BY count DESC
            `, [chatId]);

            if (result.rows.length === 0) {
                await bot.deleteMessage(chatId, statusMessage.message_id);
                await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
                return;
            }

            const chartData = {
                labels: result.rows.map(row => row.city),
                values: result.rows.map(row => parseInt(row.count))
            };

            const buffer = await this.createBarChart(
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º',
                chartData.labels,
                chartData.values,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π'
            );

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            await bot.deleteMessage(chatId, statusMessage.message_id);

            await bot.sendPhoto(chatId, buffer, {
                caption: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º',
                filename: 'cities_stats.png',
                contentType: 'image/png'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º:', error);
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if (statusMessage) {
                await bot.deleteMessage(chatId, statusMessage.message_id);
            }
            await bot.sendMessage(chatId, 
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            );
        }
    }

    static async handlePointsStats(bot, chatId) {
        let statusMessage;
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            statusMessage = await bot.sendMessage(chatId, 'üîÑ –§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—É–Ω–∫—Ç–∞–º –ø—Ä–∏—ë–º–∞...');

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—É–Ω–∫—Ç–∞–º –ø—Ä–∏–µ–º–∞
            const result = await pool.query(`
                SELECT cp.address, COUNT(*) as count
                FROM utilizations u
                JOIN users usr ON u.user_id = usr.id
                JOIN collection_points cp ON u.collection_point_id = cp.id
                WHERE usr.chat_id = $1
                GROUP BY cp.address
                ORDER BY count DESC
                LIMIT 10
            `, [chatId]);

            if (result.rows.length === 0) {
                await bot.deleteMessage(chatId, statusMessage.message_id);
                await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
                return;
            }

            const chartData = {
                labels: result.rows.map(row => row.address.substring(0, 20) + '...'),
                values: result.rows.map(row => parseInt(row.count))
            };

            const buffer = await this.createBarChart(
                '–¢–æ–ø-10 –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞',
                chartData.labels,
                chartData.values,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π'
            );

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            await bot.deleteMessage(chatId, statusMessage.message_id);

            await bot.sendPhoto(chatId, buffer, {
                caption: 'üìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –ø–æ –ø—É–Ω–∫—Ç–∞–º –ø—Ä–∏–µ–º–∞',
                filename: 'points_stats.png',
                contentType: 'image/png'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º –ø—Ä–∏–µ–º–∞:', error);
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if (statusMessage) {
                await bot.deleteMessage(chatId, statusMessage.message_id);
            }
            await bot.sendMessage(chatId, 
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—É–Ω–∫—Ç–∞–º –ø—Ä–∏—ë–º–∞.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            );
        }
    }

    static async handleMaterialsStats(bot, chatId) {
        let statusMessage;
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
            statusMessage = await bot.sendMessage(chatId, 'üîÑ –§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º...');

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
            const result = await pool.query(`
                SELECT wt.name as material, COUNT(*) as count
                FROM utilizations u
                JOIN users usr ON u.user_id = usr.id
                JOIN waste_types wt ON u.waste_type_id = wt.id
                WHERE usr.chat_id = $1
                GROUP BY wt.name
                ORDER BY count DESC
            `, [chatId]);

            if (result.rows.length === 0) {
                await bot.deleteMessage(chatId, statusMessage.message_id);
                await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
                return;
            }

            const chartData = {
                labels: result.rows.map(row => row.material),
                values: result.rows.map(row => parseInt(row.count))
            };

            const buffer = await this.createBarChart(
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
                chartData.labels,
                chartData.values,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π'
            );

            // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞
            await bot.deleteMessage(chatId, statusMessage.message_id);

            await bot.sendPhoto(chatId, buffer, {
                caption: 'üóëÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –ø–æ —Ç–∏–ø–∞–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
                filename: 'materials_stats.png',
                contentType: 'image/png'
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º:', error);
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if (statusMessage) {
                await bot.deleteMessage(chatId, statusMessage.message_id);
            }
            await bot.sendMessage(chatId, 
                '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.\n' +
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
            );
        }
    }

    static async createBarChart(title, labels, data, yAxisLabel) {
        const width = 800;
        const height = 400;

        const chartJSNodeCanvas = new ChartJSNodeCanvas({ 
            width, 
            height,
            plugins: {
                modern: ['chartjs-plugin-datalabels']
            }
        });

        const configuration = {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: yAxisLabel,
                    data: data,
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                plugins: {
                    title: {
                        display: true,
                        text: title,
                        font: {
                            size: 16,
                            weight: 'bold'
                        },
                        padding: 20
                    },
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    datalabels: {
                        anchor: 'end',
                        align: 'top',
                        formatter: (value) => value,
                        font: {
                            weight: 'bold'
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: yAxisLabel,
                            font: {
                                weight: 'bold'
                            }
                        }
                    },
                    x: {
                        ticks: {
                            maxRotation: 45,
                            minRotation: 45
                        }
                    }
                },
                layout: {
                    padding: {
                        top: 20
                    }
                }
            }
        };

        const buffer = await chartJSNodeCanvas.renderToBuffer(configuration);
        return buffer;
    }
}

module.exports = StatisticsHandler; 