const { pool } = require('../database/db');

class ShopHandler {
    static async handleShopMenu(bot, chatId) {
        try {
            console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è chatId:', chatId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const userResult = await pool.query('SELECT id FROM users WHERE chat_id = $1', [chatId]);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResult.rows);
            
            if (userResult.rows.length === 0) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
                await bot.sendMessage(chatId, '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' }]
                        ]
                    }
                });
                return;
            }

            const userId = userResult.rows[0].id;

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const awardsResult = await pool.query(
                'SELECT COUNT(*) as count FROM awards WHERE chat_id = $1',
                [chatId]
            );
            const userPoints = parseInt(awardsResult.rows[0].count);

            // –û–±–Ω–æ–≤–ª—è–µ–º points –≤ —Ç–∞–±–ª–∏—Ü–µ users
            await pool.query(
                'UPDATE users SET points = $1 WHERE chat_id = $2',
                [userPoints, chatId]
            );

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏
            const stickerPacks = await pool.query(`
                SELECT sp.*, 
                       CASE WHEN usp.id IS NOT NULL THEN true ELSE false END as is_purchased
                FROM sticker_packs sp
                LEFT JOIN user_sticker_packs usp ON sp.id = usp.sticker_pack_id AND usp.user_id = $1
                ORDER BY sp.price ASC
            `, [userId]);

            let message = `üé® –ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–∫–µ—Ä–æ–≤\n\n–£ –≤–∞—Å ${userPoints}üèÜ –Ω–∞–≥—Ä–∞–¥\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏:\n\n`;
            const keyboard = [];

            for (const pack of stickerPacks.rows) {
                message += `${pack.name}\n${pack.description}\n–¶–µ–Ω–∞: ${pack.price}üèÜ\n`;
                if (pack.is_purchased) {
                    message += '‚úÖ –£–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\n';
                }
                message += '\n';

                const row = [];
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                row.push({ 
                    text: 'üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∏–∫–µ—Ä—ã', 
                    callback_data: `preview_sticker_pack:${pack.id}` 
                });

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏, –µ—Å–ª–∏ –ø–∞–∫ –µ—â–µ –Ω–µ –∫—É–ø–ª–µ–Ω
                if (!pack.is_purchased) {
                    row.push({ 
                        text: `–ö—É–ø–∏—Ç—å (${pack.price}üèÜ)`, 
                        callback_data: `buy_sticker_pack:${pack.id}` 
                    });
                }
                
                keyboard.push(row);
            }

            keyboard.push([{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }]);

            await bot.sendMessage(chatId, message, {
                reply_markup: {
                    inline_keyboard: keyboard
                }
            });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static async handlePreviewPack(bot, chatId, packId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
            const packResult = await pool.query('SELECT * FROM sticker_packs WHERE id = $1', [packId]);
            
            if (packResult.rows.length === 0) {
                await bot.sendMessage(chatId, '–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            const pack = packResult.rows[0];

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–≤—å—é —Å—Ç–∏–∫–µ—Ä–æ–≤
            await bot.sendMessage(chatId, 
                `üé® –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ "${pack.name}"\n\n` +
                `${pack.description}\n\n` +
                `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${pack.price}üèÜ\n\n` +
                `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∏–∫–µ—Ä—ã:\n` +
                `${pack.pack_url}`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                { text: '–ö—É–ø–∏—Ç—å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫', callback_data: `buy_sticker_pack:${packId}` },
                                { text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' }
                            ]
                        ]
                    }
                }
            );

            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–≤—å—é-—Å—Ç–∏–∫–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            if (pack.preview_sticker_file_id) {
                await bot.sendSticker(chatId, pack.preview_sticker_file_id);
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–≤—å—é —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–≤—å—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    static async handleBuyPack(bot, chatId, packId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            const userResult = await pool.query('SELECT id, points FROM users WHERE chat_id = $1', [chatId]);
            
            if (userResult.rows.length === 0) {
                await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            const userId = userResult.rows[0].id;
            const userPoints = userResult.rows[0].points || 0;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
            const packResult = await pool.query('SELECT * FROM sticker_packs WHERE id = $1', [packId]);
            
            if (packResult.rows.length === 0) {
                await bot.sendMessage(chatId, '–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            const pack = packResult.rows[0];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
            const purchaseCheck = await pool.query(
                'SELECT id FROM user_sticker_packs WHERE user_id = $1 AND sticker_pack_id = $2',
                [userId, packId]
            );

            if (purchaseCheck.rows.length > 0) {
                await bot.sendMessage(chatId, '–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫.');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –Ω–∞–≥—Ä–∞–¥
            if (userPoints < pack.price) {
                await bot.sendMessage(chatId, 
                    `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n` +
                    `–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${pack.price}üèÜ\n` +
                    `–£ –≤–∞—Å –µ—Å—Ç—å: ${userPoints}üèÜ`
                );
                return;
            }

            // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const client = await pool.connect();
            try {
                await client.query('BEGIN');

                // –°–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
                await client.query(
                    'UPDATE users SET points = points - $1 WHERE id = $2',
                    [pack.price, userId]
                );

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
                await client.query(
                    'INSERT INTO user_sticker_packs (user_id, sticker_pack_id) VALUES ($1, $2)',
                    [userId, packId]
                );

                await client.query('COMMIT');

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
                await bot.sendMessage(chatId, 
                    `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ "${pack.name}"!\n\n` +
                    `–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n` +
                    `${pack.pack_url}\n\n` +
                    `–û—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–∞–≥—Ä–∞–¥—ã: ${userPoints - pack.price}üèÜ`,
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' }]
                            ]
                        }
                    }
                );

            } catch (error) {
                await client.query('ROLLBACK');
                throw error;
            } finally {
                client.release();
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}

module.exports = ShopHandler; 