const { pool } = require('../database/db');

class ShopHandler {
    static async handleShopMenu(bot, chatId) {
        try {
            console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è chatId:', chatId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const userResult = await pool.query('SELECT id FROM users WHERE chat_id = $1', [chatId]);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userResult.rows);
            
            if (userResult.rows.length === 0) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
                await bot.sendMessage(chatId, '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–≥–∞–∑–∏–Ω—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register' }]
                        ]
                    }
                });
                return;
            }

            const userId = userResult.rows[0].id;
            console.log('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã sticker_packs
            const tableCheck = await pool.query(`
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_name = 'sticker_packs'
                );
            `);
            console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã sticker_packs:', tableCheck.rows[0].exists);

            if (!tableCheck.rows[0].exists) {
                console.log('–¢–∞–±–ª–∏—Ü–∞ sticker_packs –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...');
                // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                await pool.query(`
                    CREATE TABLE IF NOT EXISTS sticker_packs (
                        id SERIAL PRIMARY KEY,
                        name VARCHAR(100) NOT NULL,
                        description TEXT,
                        price INTEGER NOT NULL CHECK (price BETWEEN 1 AND 5),
                        pack_url VARCHAR(255) NOT NULL,
                        preview_sticker_file_id VARCHAR(255),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    );

                    CREATE TABLE IF NOT EXISTS user_sticker_packs (
                        id SERIAL PRIMARY KEY,
                        user_id INTEGER REFERENCES users(id),
                        sticker_pack_id INTEGER REFERENCES sticker_packs(id),
                        purchased_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        UNIQUE(user_id, sticker_pack_id)
                    );

                    -- –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä–ø–∞–∫ –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞
                    INSERT INTO sticker_packs (name, description, price, pack_url)
                    SELECT '–ú–∏–ª—ã–µ –ö–æ—Ç–∏–∫–∏', '–°–∞–º—ã–µ –º–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∂–∏–≤–æ—Ç–Ω—ã—Ö!', 3, 'https://t.me/addstickers/Cat_sticker_pack_slast'
                    WHERE NOT EXISTS (SELECT 1 FROM sticker_packs);
                `);
            }

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏
            const stickerPacks = await pool.query('SELECT * FROM sticker_packs ORDER BY price ASC');
            console.log('–ù–∞–π–¥–µ–Ω–æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤:', stickerPacks.rows.length);
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userAwards = await pool.query(
                'SELECT COUNT(*) as count FROM awards WHERE chat_id = $1',
                [chatId]
            );
            const awardsCount = parseInt(userAwards.rows[0].count);
            console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', awardsCount);
            
            const purchasedPacks = await pool.query(
                'SELECT sticker_pack_id FROM user_sticker_packs WHERE user_id = $1',
                [userId]
            );
            const purchasedPackIds = new Set(purchasedPacks.rows.map(row => row.sticker_pack_id));
            console.log('–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏:', Array.from(purchasedPackIds));

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
            let message = `üé® *–ú–∞–≥–∞–∑–∏–Ω —Å—Ç–∏–∫–µ—Ä–æ–≤*\n\n`;
            message += `–£ –≤–∞—Å ${awardsCount}üèÜ –Ω–∞–≥—Ä–∞–¥\n\n`;
            message += `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∏:\n`;

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞–º–∏
            const keyboard = {
                inline_keyboard: []
            };

            for (const pack of stickerPacks.rows) {
                const isPurchased = purchasedPackIds.has(pack.id);
                message += `\n*${pack.name}*\n`;
                message += `${pack.description}\n`;
                message += `–¶–µ–Ω–∞: ${pack.price}üèÜ\n`;
                
                if (isPurchased) {
                    message += '‚úÖ –£–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω\n';
                    keyboard.inline_keyboard.push([
                        {
                            text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –∫ —Å–µ–±–µ',
                            url: pack.pack_url
                        }
                    ]);
                } else {
                    keyboard.inline_keyboard.push([
                        {
                            text: `–ö—É–ø–∏—Ç—å ${pack.name} (${pack.price}üèÜ)`,
                            callback_data: `buy_sticker_pack:${pack.id}`
                        }
                    ]);
                }
            }

            keyboard.inline_keyboard.push([
                { text: '¬´ –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'back_to_profile' }
            ]);

            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º');
            await bot.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞–≥–∞–∑–∏–Ω–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('–î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', error);
            console.error('Stack trace:', error.stack);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤.');
        }
    }

    static async handleBuyPack(bot, chatId, packId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–µ
            const packResult = await pool.query(
                'SELECT * FROM sticker_packs WHERE id = $1',
                [packId]
            );
            
            if (packResult.rows.length === 0) {
                await bot.sendMessage(chatId, '–°—Ç–∏–∫–µ—Ä–ø–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                return;
            }

            const pack = packResult.rows[0];

            // –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userResult = await pool.query('SELECT id FROM users WHERE chat_id = $1', [chatId]);
            if (userResult.rows.length === 0) {
                await bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
                return;
            }
            const userId = userResult.rows[0].id;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫—É–ø–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫
            const purchaseCheck = await pool.query(
                'SELECT id FROM user_sticker_packs WHERE user_id = $1 AND sticker_pack_id = $2',
                [userId, packId]
            );

            if (purchaseCheck.rows.length > 0) {
                await bot.sendMessage(chatId, '–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —ç—Ç–æ—Ç —Å—Ç–∏–∫–µ—Ä–ø–∞–∫!');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥
            const awardsCount = await pool.query(
                'SELECT COUNT(*) as count FROM awards WHERE chat_id = $1',
                [chatId]
            );

            const userAwards = parseInt(awardsCount.rows[0].count);

            if (userAwards < pack.price) {
                await bot.sendMessage(
                    chatId,
                    `‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: ${pack.price}üèÜ\n–£ –≤–∞—Å –µ—Å—Ç—å: ${userAwards}üèÜ`
                );
                return;
            }

            // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const client = await pool.connect();
            try {
                await client.query('BEGIN');

                // –°–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã (—É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ)
                await client.query(
                    'DELETE FROM awards WHERE id IN (SELECT id FROM awards WHERE chat_id = $1 ORDER BY id ASC LIMIT $2)',
                    [chatId, pack.price]
                );

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫—É–ø–∫—É
                await client.query(
                    'INSERT INTO user_sticker_packs (user_id, sticker_pack_id) VALUES ($1, $2)',
                    [userId, packId]
                );

                await client.query('COMMIT');

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
                await bot.sendMessage(
                    chatId,
                    `‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞ "${pack.name}"!\n\n` +
                    `–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã:\n${pack.pack_url}`,
                    {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã', url: pack.pack_url }],
                                [{ text: '¬´ –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω', callback_data: 'shop' }]
                            ]
                        }
                    }
                );
            } catch (error) {
                await client.query('ROLLBACK');
                throw error;
            } finally {
                client.release();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞.');
        }
    }
}

module.exports = ShopHandler; 