const { pool } = require('../database/db');
const ExcelJS = require('exceljs');
const fs = require('fs');
const path = require('path');

class UserUtilizationsHandler {
    static async handleMyUtilizations(bot, chatId) {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userCheck = await pool.query('SELECT id FROM users WHERE chat_id = $1', [chatId]);
            if (userCheck.rows.length === 0) {
                await bot.sendMessage(chatId, '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
                return;
            }

            console.log('Fetching utilizations for chat_id:', chatId);
            
            // –ü–æ–ª—É—á–∞–µ–º 6 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π (5 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è + 1 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö)
            const result = await pool.query(`
                SELECT 
                    u.date_utilized,
                    u.time_utilized,
                    c.name as city_name,
                    cp.address,
                    wt.name as waste_type,
                    u.weight
                FROM utilizations u
                JOIN users usr ON u.user_id = usr.id
                JOIN collection_points cp ON u.collection_point_id = cp.id
                JOIN cities c ON cp.city_id = c.id
                JOIN waste_types wt ON u.waste_type_id = wt.id
                WHERE usr.chat_id = $1
                ORDER BY u.date_utilized DESC, u.time_utilized DESC
                LIMIT 6
            `, [chatId]);

            console.log('Query result:', result.rows);

            if (result.rows.length === 0) {
                await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏.');
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 5 —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è–º–∏
            let message = 'üóÇ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏:\n\n';
            const utilizationsToShow = result.rows.slice(0, 5);

            for (const util of utilizationsToShow) {
                const date = new Date(util.date_utilized).toLocaleDateString('ru-RU');
                const time = util.time_utilized ? util.time_utilized.slice(0, 5) : '00:00';
                message += `üìÖ ${date} ${time}\n`;
                message += `üìç ${util.city_name}, ${util.address}\n`;
                message += `üóë ${util.waste_type}\n`;
                message += `‚öñÔ∏è ${util.weight} –∫–≥\n\n`;
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ 5 —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë"
            const keyboard = result.rows.length > 5 ? {
                inline_keyboard: [
                    [{ text: '–°–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë', callback_data: 'view_all_utilizations' }]
                ]
            } : undefined;

            await bot.sendMessage(chatId, message, {
                reply_markup: keyboard
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è—Ö.');
        }
    }

    static async handleViewAllUtilizations(bot, query) {
        const chatId = query.message.chat.id;

        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userCheck = await pool.query('SELECT id FROM users WHERE chat_id = $1', [chatId]);
            if (userCheck.rows.length === 0) {
                await bot.sendMessage(chatId, '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.');
                return;
            }

            console.log('Fetching all utilizations for chat_id:', chatId);

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const result = await pool.query(`
                SELECT 
                    u.date_utilized,
                    u.time_utilized,
                    c.name as city_name,
                    cp.address,
                    wt.name as waste_type,
                    u.weight
                FROM utilizations u
                JOIN users usr ON u.user_id = usr.id
                JOIN collection_points cp ON u.collection_point_id = cp.id
                JOIN cities c ON cp.city_id = c.id
                JOIN waste_types wt ON u.waste_type_id = wt.id
                WHERE usr.chat_id = $1
                ORDER BY u.date_utilized DESC, u.time_utilized DESC
            `, [chatId]);

            console.log('Query result:', result.rows);

            if (result.rows.length === 0) {
                await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ–± —É—Ç–∏–ª–∏–∑–∞—Ü–∏–∏.');
                return;
            }

            // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('–£—Ç–∏–ª–∏–∑–∞—Ü–∏–∏');

            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            worksheet.columns = [
                { header: '–î–∞—Ç–∞', key: 'date', width: 12 },
                { header: '–í—Ä–µ–º—è', key: 'time', width: 10 },
                { header: '–ì–æ—Ä–æ–¥', key: 'city', width: 20 },
                { header: '–ê–¥—Ä–µ—Å', key: 'address', width: 30 },
                { header: '–¢–∏–ø –æ—Ç—Ö–æ–¥–æ–≤', key: 'waste_type', width: 20 },
                { header: '–í–µ—Å (–∫–≥)', key: 'weight', width: 15 }
            ];

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for (const util of result.rows) {
                worksheet.addRow({
                    date: new Date(util.date_utilized).toLocaleDateString('ru-RU'),
                    time: util.time_utilized ? util.time_utilized.slice(0, 5) : '00:00',
                    city: util.city_name,
                    address: util.address,
                    waste_type: util.waste_type,
                    weight: util.weight
                });
            }

            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            const uploadsDir = path.join(__dirname, '../../uploads');
            if (!fs.existsSync(uploadsDir)) {
                fs.mkdirSync(uploadsDir, { recursive: true });
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            const fileName = `utilizations_${chatId}_${Date.now()}.xlsx`;
            const filePath = path.join(uploadsDir, fileName);
            await workbook.xlsx.writeFile(filePath);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await bot.sendDocument(chatId, filePath, {
                caption: 'üìä –û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –≤–∞—à–∏–º —É—Ç–∏–ª–∏–∑–∞—Ü–∏—è–º'
            });

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            fs.unlinkSync(filePath);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
            await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.');
        }
    }
}

module.exports = UserUtilizationsHandler; 